{"version":3,"sources":["components/Table.js","components/Header.js","components/SearchInput.js","App.js","index.js"],"names":["Table","state","order","sortByID","setState","sortedIDs","this","props","search","members","filter","c","console","log","color","includes","sort","a","b","id","className","scope","onClick","map","charID","itemScope","key","name","nickname","snack","email","React","Component","Header","SearchInput","onChange","value","type","placeholder","App","useState","setSearch","event","target","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"i5BA+FeA,E,4MAxFbC,MAAQ,CACNC,MAAO,a,EAMTC,SAAW,WACT,EAAKC,SAAS,CACZF,MAA4B,cAArB,EAAKD,MAAMC,MAAwB,aAAe,e,uDAWnD,IAAD,OAaDG,GAXoB,KAAtBC,KAAKC,MAAMC,OACNC,EAGAA,EAAQC,QAAO,SAACC,GAErB,OADAC,QAAQC,IAAI,EAAKN,MAAMC,QAChBG,EAAEG,MAAMC,SAAS,EAAKR,MAAMC,YAKhBQ,MAAK,SAACC,EAAGC,GAC9B,OAAID,EAAEE,KAAOD,EAAEC,GACN,EAEgB,cAArB,EAAKlB,MAAMC,MACTe,EAAEE,GAAKD,EAAEC,IACH,EAEH,EAELF,EAAEE,GAAKD,EAAEC,GACJ,GAED,KAKV,OAFAP,QAAQC,IAAIP,KAAKL,MAAMQ,SAGvB,6BACO,2BAAOW,UAAU,SACjB,2BAAOA,UAAU,cACxB,4BAEE,wBAAIC,MAAM,MAAMC,QAAShB,KAAKH,UAA9B,KACA,wBAAIkB,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,YACA,wBAAIA,MAAM,OAAV,kBACA,wBAAIA,MAAM,OAAV,eACA,wBAAIA,MAAM,OAAV,WAKJ,+BACGhB,EAAUkB,KAAI,SAACC,GAAD,OACf,wBAAIC,UAAU,MAAML,UAAU,OAAOM,IAAKF,EAAOL,IAE/C,4BAAKK,EAAOL,IACZ,4BAAKK,EAAOG,MACZ,4BAAKH,EAAOI,UACZ,4BAAKJ,EAAOK,OACZ,4BAAKL,EAAOV,OACZ,4BAAKU,EAAOM,kB,GA7EEC,IAAMC,WCMXC,MARf,WACI,OACI,6BACI,wBAAIb,UAAU,SAAd,sCCiBGc,MAhBf,YAA0C,IAAnBC,EAAkB,EAAlBA,SAAUC,EAAQ,EAARA,MAC7B,OACE,6BACE,0BAAMhB,UAAU,QACd,2BACEgB,MAAOA,EACPT,KAAK,SACLQ,SAAUA,EACVE,KAAK,OACLC,YAAY,uBCaTC,MAvBf,WAAe,MAIeC,mBAAS,IAJxB,mBAINhC,EAJM,KAIEiC,EAJF,KAMX,OACE,6BACE,kBAAC,EAAD,MAKA,kBAAC,EAAD,CACAL,MAAO5B,EACP2B,SAAU,SAACO,GAAD,OAAWD,EAAUC,EAAMC,OAAOP,UAE5C,kBAAC,EAAD,CAAO5B,OAAQA,MClBvBoC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.ba41b1aa.chunk.js","sourcesContent":["import React from \"react\";\r\n//import the array of characters\r\nimport members from \"../members.json\";\r\n\r\n// create a class to set the state of the order, to utilize 'this.state.order'\r\n// this could also be function, with props passed to it instead!\r\nclass Table extends React.Component {\r\n  state = {\r\n    order: \"ascending\"\r\n  };\r\n  \r\n  // create a function that sorts the data in the members array by ID\r\n  // this acts like a toggle, in that it checks to see if the data is\r\n  // first in ascending order, if it's false (in descending order) - then change it to ascending\r\n  sortByID = () => {\r\n    this.setState({\r\n      order: this.state.order === \"ascending\" ? \"descending\" : \"ascending\",\r\n    });\r\n  };\r\n\r\n  // Filtering by one property:\r\n  // create a variable to hold the members array of data\r\n  // back in App.js, we're passing the prop of search to the Table component,\r\n  // and calling on it here by 'this.props.search' to get the value of the search input\r\n  // if the search input is empty, then the original members array will be displayed\r\n  // if the search criteria matches a value from the color property of the members array,\r\n  // then the row(s) containing those matching color values will be displayed\r\n  render() {\r\n    let char = members;\r\n    if (this.props.search === \"\") {\r\n      char = members;\r\n    } \r\n    else {\r\n      char = members.filter((c) => {\r\n        console.log(this.props.search);\r\n        return c.color.includes(this.props.search);\r\n      });\r\n    }\r\n\r\n    // Sorting by ID\r\n    const sortedIDs = char.sort((a, b) => {\r\n      if (a.id === b.id) {\r\n        return 0;\r\n      }\r\n      if (this.state.order === \"ascending\") {\r\n        if (a.id < b.id) {\r\n          return -1;\r\n        }\r\n        return 1;\r\n      }\r\n      if (a.id < b.id) {\r\n        return 1;\r\n      }\r\n      return -1;\r\n    });\r\n\r\n    console.log(this.state.members);\r\n\r\n    return (\r\n    <div>\r\n           <table className=\"table\">\r\n           <thead className=\"thead-dark\">\r\n    <tr>\r\n      {/* by clicking on the Column Header ID, users can sort the table */}\r\n      <th scope=\"col\" onClick={this.sortByID} >#</th>\r\n      <th scope=\"col\">Name</th>\r\n      <th scope=\"col\">Nickname</th>\r\n      <th scope=\"col\">Favorite Snack</th>\r\n      <th scope=\"col\">Power Color</th>\r\n      <th scope=\"col\">Email</th>\r\n    </tr>\r\n  </thead>\r\n  \r\n\r\n  <tbody>\r\n    {sortedIDs.map((charID) => (\r\n    <tr itemScope=\"row\" className=\"main\" key={charID.id}>\r\n      \r\n      <td>{charID.id}</td>\r\n      <td>{charID.name}</td>\r\n      <td>{charID.nickname}</td>\r\n      <td>{charID.snack}</td>\r\n      <td>{charID.color}</td>\r\n      <td>{charID.email}</td> \r\n    </tr> \r\n    ))}\r\n      \r\n  </tbody>\r\n  </table>\r\n    </div>)}\r\n  \r\n  \r\n    \r\n}\r\n\r\nexport default Table;","import React from \"react\";\r\n\r\n// add styling to center the text\r\n\r\nfunction Header() {\r\n    return (\r\n        <div>\r\n            <h1 className=\"title\">Meet the Members of Mystery Inc.</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\n\r\n\r\n// the SearchInput component takes in 2 params: onChange and value\r\n// these are wrapped in curly braces because of object destructuring!\r\n// from App.js, these properties are turned into objects.\r\n// instead of passing onChange and value as params WITHOUT curly braces and thus needing to use 'props.onChange' + 'props.value',\r\n// the code is cleaner, and we can simply pass these values as 'onChange' and 'value' (lines 23 + 25)\r\nfunction SearchInput ({onChange, value}) {\r\n    return (\r\n      <div>\r\n        <form className=\"form\">\r\n          <input\r\n            value={value}\r\n            name=\"search\"\r\n            onChange={onChange}\r\n            type=\"text\"\r\n            placeholder=\"Search by Color\"\r\n          />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport default SearchInput;\r\n","//import React framework and appropriate Hook(s)\nimport React, { useState } from \"react\";\n//import Components being utilized to compose the app/website\nimport Table from \"./components/Table\";\nimport Header from \"./components/Header\";\nimport SearchInput from \"./components/SearchInput\";\n\nfunction App() {\n  // create a variable to both:\n  // a: create the initial state of the search input's value + holds it's value as it changes\n  // b: hold a function that updates the state of the search input's value\n  const [search, setSearch] = useState(\"\");\n  \n    return (\n      <div>\n        <Header />\n          {/* Pass the following properties to the SearchInput component:\n              value: which holds the value of the current state of the search input, and\n              onChange: which is a function that calls the setSearch function to update the state of\n              the search input   */}\n        <SearchInput   \n        value={search}\n        onChange={(event) => setSearch(event.target.value)}\n        />\n        <Table search={search} />\n      </div>\n    );\n  \n}\n\nexport default App;\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}